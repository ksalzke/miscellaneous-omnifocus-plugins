/*{
	"type": "action",
	"targets": ["omnifocus"],
	"author": "Kaitlin Salzke",
	"identifier": "com.KaitlinSalzke.sortByImportance",
	"version": "1.0",
	"description": "",
	"label": "Sort By Importance",
	"shortLabel": "Sort By Importance"
}*/

// CREDIT: The async mergesort used here is adapted from https://github.com/punkave/async-merge-sort.

var later;

var _ = (function() {
  var action = new PlugIn.Action(function(selection, sender) {
    // GET CONFIGURATION INFO

    config = PlugIn.find("com.KaitlinSalzke.config").library("configLibrary");
    ignoredFolders = config.ignoredFoldersForSortByImportance; // NB folders including 'Maybe' will also be ignored
    ignoredTags = config.ignoredTagsForSortByImportance;
    sortedTag = config.sortedTag;

    // SET UP FOR asyncMergeSort

    if (typeof setImmediate === "undefined") {
      later = function(fn) {
        return Timer.once(0, fn);
      };
    } else {
      later = setImmediate;
    }

    // // GET UNSORTED ITEMS

    // get all remaining projects not in 'maybe' folder
    projectsList = [];
    library.apply(function(item) {
      if (
        item instanceof Folder &&
        (/Maybe/.test(item.name) ||
          (ignoredFolders.length > 0 && ignoredFolders.includes(item)))
      ) {
        return ApplyResult.SkipChildren;
      }
      if (
        item instanceof Project &&
        (item.task.taskStatus === Task.Status.Available ||
          item.task.taskStatus === Task.Status.Blocked)
      ) {
        projectsList.push(item);
      }
    });

    // if SAL, get all remaining root tasks; otherwise get project - then check if already ranked and if not add to 'unsorted' array
    unsortedItems = [];
    projectsList.forEach(function(project) {
      if (project.containsSingletonActions) {
        project.task.children.forEach(function(task) {
          if (
            (task.taskStatus === Task.Status.Available ||
              task.taskStatus === Task.Status.Blocked) &&
            !task.tags.includes(sortedTag) &&
            (ignoredTags.length > 0 &&
              !task.tags.some(function(tag) {
                return ignoredTags.includes(tag);
              }))
          ) {
            unsortedItems.push(task);
          }
        });
      } else if (!project.task.tags.includes(sortedTag)) {
        unsortedItems.push(project.task);
      }
    });

    // GET SORTED ITEMS

    // clear backup tag if still exists
    backupCopyTag = tagNamed("ZZ_Sorted") || new Tag("ZZ_Sorted)");
    backupCopyTag.tasks.forEach(function(item) {
      item.apply(function(task) {
        task.removeTag(backupCopyTag);
      });
    });

    sortedItems = [];
    sortedTag.tasks.forEach(function(item) {
      item.apply(function(task) {
        task.addTag(backupCopyTag);
        task.removeTag(sortedTag);
      });
      if (
        item.taskStatus === Task.Status.Available ||
        item.taskStatus === Task.Status.Blocked
      ) {
        // push project root tasks & top-level SAL tasks
        if (item.project !== null) {
          sortedItems.push(item);
        } else if (
          item.containingProject.containsSingletonActions &&
          item.containingProject.task.children.includes(item)
        ) {
          sortedItems.push(item);
        }
      }
    });

    asyncMergeSort(
      unsortedItems,
      function(a, b, callback) {
        var alert = new Alert(
          "Comparison needed:",
          "Is \n\n'" +
            a.name +
            "'\n\n more important than \n\n'" +
            b.name +
            "'\n\n?"
        );
        alert.addOption("Yes");
        alert.addOption("No");
        alert.addOption("Cancel");
        alert.show(function(result) {
          if (result == 0) {
            return callback(null, -1);
          } else if (result == 1) {
            return callback(null, 1);
          } else {
            console.log("Alert cancelled.");
          }
        });
      },
      sortedItems,
      function(err, sorted) {
        if (err) {
          alert("Oh dear, an error occurred.");
        }
        result = sorted;
        console.log(result);

        result.forEach(function(item) {
          item.apply(function(task) {
            task.addTag(sortedTag);
          });
        });
      }
    );
  });

  action.validate = function(selection, sender) {
    // validation code
    // selection options: tasks, projects, folders, tags
    return true;
  };

  return action;
})();
_;

function asyncMergeSort(items, comparator, alreadySorted, callback) {
  // dice into lists of length 1, which are considered to be
  // internally sorted
  var lists = [];
  for (var i = 0; i < items.length; i++) {
    lists.push([items[i]]);
  }
  if (alreadySorted !== null) {
    lists.push(alreadySorted);
  }

  // if there are no items, we're done
  if (!lists.length) {
    return callback(null, []);
  }

  // Make the first merging pass
  return pass();

  function pass() {
    var x = 0;
    var newLists = [];
    if (lists.length === 1) {
      // one list left, we're done
      return callback(null, lists[0]);
    }
    return merge(x, x + 1);

    function merge() {
      if (x + 1 >= lists.length) {
        if (x + 1 == lists.length) {
          newLists.push(lists[x]);
        }
        lists = newLists;
        return later(pass);
      }

      var listOne = lists[x];
      var listTwo = lists[x + 1];
      var indexOne = 0;
      var indexTwo = 0;
      var newList = [];
      // compare the first pair
      consider();

      function consider() {
        if (indexOne === listOne.length) {
          if (indexTwo === listTwo.length) {
            newLists.push(newList);
            x += 2;
            return merge();
          }
          newList.push(listTwo[indexTwo++]);
          // make async to avoid stack crashes
          return later(consider);
        } else if (indexTwo === listTwo.length) {
          newList.push(listOne[indexOne++]);
          // make async to avoid stack crashes
          return later(consider);
        }
        return comparator(listOne[indexOne], listTwo[indexTwo], function(
          err,
          value
        ) {
          if (err) {
            return callback(err);
          }
          if (value === -1) {
            newList.push(listOne[indexOne++]);
          } else if (value === 1) {
            newList.push(listTwo[indexTwo++]);
          } else {
            newList.push(listOne[indexOne++]);
            newList.push(listTwo[indexTwo++]);
          }
          return consider();
        });
      }
    }
  }
}
